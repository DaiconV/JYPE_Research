// Generated by gencpp from file pa10controller/addToQueueRequest.msg
// DO NOT EDIT!


#ifndef PA10CONTROLLER_MESSAGE_ADDTOQUEUEREQUEST_H
#define PA10CONTROLLER_MESSAGE_ADDTOQUEUEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pa10controller
{
template <class ContainerAllocator>
struct addToQueueRequest_
{
  typedef addToQueueRequest_<ContainerAllocator> Type;

  addToQueueRequest_()
    : gripper(false)
    , endOfQueue(false)
    , positions()
    , commands()  {
      positions.assign(0.0);

      commands.assign(0.0);
  }
  addToQueueRequest_(const ContainerAllocator& _alloc)
    : gripper(false)
    , endOfQueue(false)
    , positions()
    , commands()  {
  (void)_alloc;
      positions.assign(0.0);

      commands.assign(0.0);
  }



   typedef uint8_t _gripper_type;
  _gripper_type gripper;

   typedef uint8_t _endOfQueue_type;
  _endOfQueue_type endOfQueue;

   typedef boost::array<float, 7>  _positions_type;
  _positions_type positions;

   typedef boost::array<float, 7>  _commands_type;
  _commands_type commands;





  typedef boost::shared_ptr< ::pa10controller::addToQueueRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pa10controller::addToQueueRequest_<ContainerAllocator> const> ConstPtr;

}; // struct addToQueueRequest_

typedef ::pa10controller::addToQueueRequest_<std::allocator<void> > addToQueueRequest;

typedef boost::shared_ptr< ::pa10controller::addToQueueRequest > addToQueueRequestPtr;
typedef boost::shared_ptr< ::pa10controller::addToQueueRequest const> addToQueueRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pa10controller::addToQueueRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pa10controller::addToQueueRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pa10controller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pa10controller::addToQueueRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pa10controller::addToQueueRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pa10controller::addToQueueRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pa10controller::addToQueueRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pa10controller::addToQueueRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pa10controller::addToQueueRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pa10controller::addToQueueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb607eed6d73397ca138f7e25e56c188";
  }

  static const char* value(const ::pa10controller::addToQueueRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb607eed6d73397cULL;
  static const uint64_t static_value2 = 0xa138f7e25e56c188ULL;
};

template<class ContainerAllocator>
struct DataType< ::pa10controller::addToQueueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pa10controller/addToQueueRequest";
  }

  static const char* value(const ::pa10controller::addToQueueRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pa10controller::addToQueueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
bool gripper\n\
bool endOfQueue\n\
float32[7] positions\n\
float32[7] commands\n\
";
  }

  static const char* value(const ::pa10controller::addToQueueRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pa10controller::addToQueueRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gripper);
      stream.next(m.endOfQueue);
      stream.next(m.positions);
      stream.next(m.commands);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct addToQueueRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pa10controller::addToQueueRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pa10controller::addToQueueRequest_<ContainerAllocator>& v)
  {
    s << indent << "gripper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gripper);
    s << indent << "endOfQueue: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.endOfQueue);
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.positions[i]);
    }
    s << indent << "commands[]" << std::endl;
    for (size_t i = 0; i < v.commands.size(); ++i)
    {
      s << indent << "  commands[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.commands[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PA10CONTROLLER_MESSAGE_ADDTOQUEUEREQUEST_H
